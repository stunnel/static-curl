name: build-and-release

on:
  # run it manually
  workflow_dispatch:
    inputs:
      CURL_VERSION:
        description: 'cURL Version'
        required: false
        default: ''
        type: string
      ENABLE_ECH:
        description: 'Enable ECH Support'
        required: false
        default: false
        type: boolean
      TLS_LIB:
        description: 'TLS Library (only openssl is supported for now)'
        required: false
        default: 'openssl'
        type: string
      OPENSSL_VERSION:
        description: 'OpenSSL Version'
        required: false
        default: ''
        type: string
      OPENSSL_BRANCH:
        description: 'OpenSSL Branch'
        required: false
        default: 'feature/ech'
        type: string
      ARCHES_LINUX_GLIBC:
        description: 'Linux glibc Architecture List'
        required: false
        default: 'x86_64 aarch64 armv7 armv5 riscv64 s390x mips64 mips64el mipsel powerpc64le powerpc i686'
        type: string
      ARCHES_LINUX_MUSL:
        description: 'Linux musl Architecture List'
        required: false
        default: 'x86_64 aarch64 armv7 armv5 riscv64 s390x mips64 mips64el mips mipsel powerpc64le powerpc loongarch64'
        type: string
      ARCHES_WINDOWS:
        description: 'Windows Architecture List'
        required: false
        default: 'x86_64 aarch64 armv7 i686'
        type: string
      ARCHES_MACOS:
        description: 'macOS Architecture List'
        required: false
        default: 'x86_64 arm64'
        type: string

jobs:
  build-Linux:
    name: build-Linux (${{ github.ref_name }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set build variables
        run: |
          # Set all build variables with fallback logic
          echo "ARCHES=${{ inputs.ARCHES_LINUX_GLIBC != '' && inputs.ARCHES_LINUX_GLIBC || vars.ARCHES_LINUX_GLIBC }}" >> $GITHUB_ENV
          echo "CURL_VERSION=${{ inputs.CURL_VERSION != '' && inputs.CURL_VERSION || vars.CURL_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_ECH=${{ inputs.ENABLE_ECH }}" >> $GITHUB_ENV
          echo "TLS_LIB=${{ inputs.TLS_LIB != '' && inputs.TLS_LIB || vars.TLS_LIB }}" >> $GITHUB_ENV
          echo "OPENSSL_VERSION=${{ inputs.OPENSSL_VERSION != '' && inputs.OPENSSL_VERSION || vars.OPENSSL_VERSION }}" >> $GITHUB_ENV
          echo "OPENSSL_BRANCH=${{ inputs.OPENSSL_BRANCH != '' && inputs.OPENSSL_BRANCH || vars.OPENSSL_BRANCH }}" >> $GITHUB_ENV
          echo "NGTCP2_VERSION=${{ vars.NGTCP2_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP3_VERSION=${{ vars.NGHTTP3_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP2_VERSION=${{ vars.NGHTTP2_VERSION }}" >> $GITHUB_ENV
          echo "LIBIDN2_VERSION=${{ vars.LIBIDN2_VERSION }}" >> $GITHUB_ENV
          echo "LIBUNISTRING_VERSION=${{ vars.LIBUNISTRING_VERSION }}" >> $GITHUB_ENV
          echo "ZLIB_VERSION=${{ vars.ZLIB_VERSION }}" >> $GITHUB_ENV
          echo "BROTLI_VERSION=${{ vars.BROTLI_VERSION }}" >> $GITHUB_ENV
          echo "ZSTD_VERSION=${{ vars.ZSTD_VERSION }}" >> $GITHUB_ENV
          echo "LIBSSH2_VERSION=${{ vars.LIBSSH2_VERSION }}" >> $GITHUB_ENV
          echo "ARES_VERSION=${{ vars.ARES_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_TRURL=${{ vars.ENABLE_TRURL }}" >> $GITHUB_ENV
          echo "TRURL_VERSION=${{ vars.TRURL_VERSION }}" >> $GITHUB_ENV
          echo "LIBC=glibc" >> $GITHUB_ENV
          echo "QBT_MUSL_CROSS_MAKE_VERSION=${{ vars.QBT_MUSL_CROSS_MAKE_VERSION }}" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE=debian:latest" >> $GITHUB_ENV
          echo "TOKEN_READ=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Cross Build Static cURL
        run: sh curl-static-cross.sh

      - name: Set up environment
        run: |
          VERSION=`cat release/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact (version)
        uses: actions/upload-artifact@v4
        with:
          name: curl-version
          path: release/version.txt
          retention-days: 90
          if-no-files-found: error
          overwrite: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-binary-linux-${{ env.VERSION }}
          path: release
          retention-days: 90
          if-no-files-found: error
          overwrite: true

  build-Linux-musl:
    name: build-Linux-musl (${{ github.ref_name }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set build variables
        run: |
          # Set all build variables with fallback logic
          echo "ARCHES=${{ inputs.ARCHES_LINUX_MUSL != '' && inputs.ARCHES_LINUX_MUSL || vars.ARCHES_LINUX_MUSL }}" >> $GITHUB_ENV
          echo "CURL_VERSION=${{ inputs.CURL_VERSION != '' && inputs.CURL_VERSION || vars.CURL_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_ECH=${{ inputs.ENABLE_ECH }}" >> $GITHUB_ENV
          echo "TLS_LIB=${{ inputs.TLS_LIB != '' && inputs.TLS_LIB || vars.TLS_LIB }}" >> $GITHUB_ENV
          echo "OPENSSL_VERSION=${{ inputs.OPENSSL_VERSION != '' && inputs.OPENSSL_VERSION || vars.OPENSSL_VERSION }}" >> $GITHUB_ENV
          echo "OPENSSL_BRANCH=${{ inputs.OPENSSL_BRANCH != '' && inputs.OPENSSL_BRANCH || vars.OPENSSL_BRANCH }}" >> $GITHUB_ENV
          echo "NGTCP2_VERSION=${{ vars.NGTCP2_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP3_VERSION=${{ vars.NGHTTP3_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP2_VERSION=${{ vars.NGHTTP2_VERSION }}" >> $GITHUB_ENV
          echo "LIBIDN2_VERSION=${{ vars.LIBIDN2_VERSION }}" >> $GITHUB_ENV
          echo "LIBUNISTRING_VERSION=${{ vars.LIBUNISTRING_VERSION }}" >> $GITHUB_ENV
          echo "ZLIB_VERSION=${{ vars.ZLIB_VERSION }}" >> $GITHUB_ENV
          echo "BROTLI_VERSION=${{ vars.BROTLI_VERSION }}" >> $GITHUB_ENV
          echo "ZSTD_VERSION=${{ vars.ZSTD_VERSION }}" >> $GITHUB_ENV
          echo "LIBSSH2_VERSION=${{ vars.LIBSSH2_VERSION }}" >> $GITHUB_ENV
          echo "ARES_VERSION=${{ vars.ARES_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_TRURL=${{ vars.ENABLE_TRURL_MUSL }}" >> $GITHUB_ENV
          echo "TRURL_VERSION=${{ vars.TRURL_VERSION }}" >> $GITHUB_ENV
          echo "LIBC=musl" >> $GITHUB_ENV
          echo "QBT_MUSL_CROSS_MAKE_VERSION=${{ vars.QBT_MUSL_CROSS_MAKE_VERSION }}" >> $GITHUB_ENV
          echo "STATIC_LIBRARY=1" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE=debian:latest" >> $GITHUB_ENV
          echo "TOKEN_READ=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Cross Build Static cURL
        run: sh curl-static-cross.sh

      - name: Set up environment
        run: |
          VERSION=`cat release/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact (version)
        uses: actions/upload-artifact@v4
        with:
          name: curl-version
          path: release/version.txt
          retention-days: 90
          if-no-files-found: error
          overwrite: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-binary-linux-musl-${{ env.VERSION }}
          path: release
          retention-days: 90
          if-no-files-found: error
          overwrite: true

  build-Windows:
    name: build-Windows (${{ github.ref_name }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set build variables
        run: |
          # Set all build variables with fallback logic
          echo "ARCHES=${{ inputs.ARCHES_WINDOWS != '' && inputs.ARCHES_WINDOWS || vars.ARCHES_WINDOWS }}" >> $GITHUB_ENV
          echo "CURL_VERSION=${{ inputs.CURL_VERSION != '' && inputs.CURL_VERSION || vars.CURL_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_ECH=${{ inputs.ENABLE_ECH }}" >> $GITHUB_ENV
          echo "TLS_LIB=${{ inputs.TLS_LIB != '' && inputs.TLS_LIB || vars.TLS_LIB }}" >> $GITHUB_ENV
          echo "OPENSSL_VERSION=${{ inputs.OPENSSL_VERSION != '' && inputs.OPENSSL_VERSION || vars.OPENSSL_VERSION }}" >> $GITHUB_ENV
          echo "OPENSSL_BRANCH=${{ inputs.OPENSSL_BRANCH != '' && inputs.OPENSSL_BRANCH || vars.OPENSSL_BRANCH }}" >> $GITHUB_ENV
          echo "NGTCP2_VERSION=${{ vars.NGTCP2_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP3_VERSION=${{ vars.NGHTTP3_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP2_VERSION=${{ vars.NGHTTP2_VERSION }}" >> $GITHUB_ENV
          echo "LIBIDN2_VERSION=${{ vars.LIBIDN2_VERSION }}" >> $GITHUB_ENV
          echo "LIBUNISTRING_VERSION=${{ vars.LIBUNISTRING_VERSION }}" >> $GITHUB_ENV
          echo "ZLIB_VERSION=${{ vars.ZLIB_VERSION }}" >> $GITHUB_ENV
          echo "BROTLI_VERSION=${{ vars.BROTLI_VERSION }}" >> $GITHUB_ENV
          echo "ZSTD_VERSION=${{ vars.ZSTD_VERSION }}" >> $GITHUB_ENV
          echo "LIBSSH2_VERSION=${{ vars.LIBSSH2_VERSION }}" >> $GITHUB_ENV
          echo "ARES_VERSION=${{ vars.ARES_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_TRURL=${{ vars.ENABLE_TRURL }}" >> $GITHUB_ENV
          echo "TRURL_VERSION=${{ vars.TRURL_VERSION }}" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE=mstorsjo/llvm-mingw:latest" >> $GITHUB_ENV
          echo "TOKEN_READ=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Cross Build Static cURL
        run: sh curl-static-win.sh

      - name: Set up environment
        run: |
          VERSION=`cat release/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact (version)
        uses: actions/upload-artifact@v4
        with:
          name: curl-version
          path: release/version.txt
          retention-days: 90
          if-no-files-found: error
          overwrite: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-binary-windows-${{ env.VERSION }}
          path: release
          retention-days: 90
          if-no-files-found: error
          overwrite: true

  build-macOS:
    name: build-macOS (${{ github.ref_name }})
    runs-on: macos-latest

    steps:
      - name: Set variables
        run: |
          echo "MACOS_RELEASE_DIR=${HOME}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set build variables
        run: |
          # Set all build variables with fallback logic
          echo "ARCHES=${{ inputs.ARCHES_MACOS != '' && inputs.ARCHES_MACOS || vars.ARCHES_MACOS }}" >> $GITHUB_ENV
          echo "CURL_VERSION=${{ inputs.CURL_VERSION != '' && inputs.CURL_VERSION || vars.CURL_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_ECH=${{ inputs.ENABLE_ECH }}" >> $GITHUB_ENV
          echo "TLS_LIB=${{ inputs.TLS_LIB != '' && inputs.TLS_LIB || vars.TLS_LIB }}" >> $GITHUB_ENV
          echo "OPENSSL_VERSION=${{ inputs.OPENSSL_VERSION != '' && inputs.OPENSSL_VERSION || vars.OPENSSL_VERSION }}" >> $GITHUB_ENV
          echo "OPENSSL_BRANCH=${{ inputs.OPENSSL_BRANCH != '' && inputs.OPENSSL_BRANCH || vars.OPENSSL_BRANCH }}" >> $GITHUB_ENV
          echo "NGTCP2_VERSION=${{ vars.NGTCP2_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP3_VERSION=${{ vars.NGHTTP3_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP2_VERSION=${{ vars.NGHTTP2_VERSION }}" >> $GITHUB_ENV
          echo "LIBIDN2_VERSION=${{ vars.LIBIDN2_VERSION }}" >> $GITHUB_ENV
          echo "LIBUNISTRING_VERSION=${{ vars.LIBUNISTRING_VERSION }}" >> $GITHUB_ENV
          echo "ZLIB_VERSION=${{ vars.ZLIB_VERSION }}" >> $GITHUB_ENV
          echo "BROTLI_VERSION=${{ vars.BROTLI_VERSION }}" >> $GITHUB_ENV
          echo "ZSTD_VERSION=${{ vars.ZSTD_VERSION }}" >> $GITHUB_ENV
          echo "LIBSSH2_VERSION=${{ vars.LIBSSH2_VERSION }}" >> $GITHUB_ENV
          echo "ARES_VERSION=${{ vars.ARES_VERSION }}" >> $GITHUB_ENV
          echo "TOKEN_READ=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Build Static cURL on macOS
        run: bash curl-static-mac.sh

      - name: Set up environment
        run: |
          VERSION=`cat ${{ env.MACOS_RELEASE_DIR }}/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact (version)
        uses: actions/upload-artifact@v4
        with:
          name: curl-version
          path: ${{ env.MACOS_RELEASE_DIR }}/version.txt
          retention-days: 90
          if-no-files-found: error
          overwrite: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-binary-macos-${{ env.VERSION }}
          path: ${{ env.MACOS_RELEASE_DIR }}/release
          retention-days: 90
          if-no-files-found: error
          overwrite: true

  release:
    name: release curl (${{ github.ref_name }})
    needs: [build-Linux, build-Linux-musl, build-Windows, build-macOS]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: curl-version
          path: curl-version

      - name: Set up environment
        run: |
          VERSION=`cat  curl-version/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set RELEASE_TAG
        run: |
          if [ "${{ inputs.ENABLE_ECH }}" = "true" ]; then
            RELEASE_TAG="${{ env.VERSION }}-ech"
          else
            RELEASE_TAG="${{ env.VERSION }}"
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "Will release as: $RELEASE_TAG"

      - name: Download artifact (linux)
        uses: actions/download-artifact@v4
        with:
          name: curl-binary-linux-${{ env.VERSION }}
          path: release

      - name: Download artifact (linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: curl-binary-linux-musl-${{ env.VERSION }}
          path: release

      - name: Download artifact (macos)
        uses: actions/download-artifact@v4
        with:
          name: curl-binary-macos-${{ env.VERSION }}
          path: release

      - name: Download artifact (windows)
        uses: actions/download-artifact@v4
        with:
          name: curl-binary-windows-${{ env.VERSION }}
          path: release

      - name: List compiled files
        run: |
          ls -l release/*
          echo
          file release/bin/curl-*
          echo
          cat release/version-info.txt
          echo
          sha256sum release/bin/curl-*

      - name: Compress and Create Release Note
        env:
          TLS_LIB: ${{ vars.TLS_LIB }}
        run: |
          TLS_LIB=${TLS_LIB}
          bash release.sh

      - name: List compressed files
        run: ls -l release/*

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        if: github.ref == 'refs/heads/main'
        with:
          files: |
            release/bin/curl-*.tar.xz
            release/curl-*.tar.xz
          body_path: release/release.md
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-release-${{ env.VERSION }}
          path: release
          retention-days: 90
          if-no-files-found: error
          overwrite: true
